{
  "name": "Google Maps",
  "tagline": "Collection of Google Maps API Web Services for Laravel",
  "body": "## Collection of Google Maps API Web Services for Laravel \r\nProvides convenient way of setting up and making requests to Maps API from [Laravel] (http://laravel.com/) application. \r\nFor services documentation, API key and Usage Limits visit [Google Maps API Web Services] (https://developers.google.com/maps/documentation/webservices/) and [Maps API for Terms of Service License Restrictions] (https://developers.google.com/maps/terms#section_10_12).\r\n\r\nCheckout this package in action - [mapio.co.uk](http://mapio.co.uk)\r\n\r\nFeatures\r\n------------\r\n* [Directions API] (https://developers.google.com/maps/documentation/directions/)\r\n* [Distance Matrix API] (https://developers.google.com/maps/documentation/distance-matrix/)\r\n* [Elevation API] (https://developers.google.com/maps/documentation/elevation/)\r\n* [Geocoding API] (https://developers.google.com/maps/documentation/geocoding/)\r\n* [Geolocation API] (https://developers.google.com/maps/documentation/geolocation/)\r\n* [Roads API] (https://developers.google.com/maps/documentation/roads/)\r\n* [Time Zone API] (https://developers.google.com/maps/documentation/timezone/)\r\n* [Places API Web Services] (https://developers.google.com/places/web-service/)\r\n\r\n\r\nDependency\r\n------------\r\n* [PHP cURL] (http://php.net/manual/en/curl.installation.php)\r\n* [PHP 5] (http://php.net/)\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nIssue following command in console:\r\n\r\n```php\r\ncomposer require alexpechkarev/google-maps:1.0.5\r\n```\r\n\r\nAlternatively  edit composer.json by adding following line and run **`composer update`**\r\n```php\r\n\"require\": { \r\n\t\t....,\r\n\t\t\"alexpechkarev/google-maps\":\"1.0.5\",\r\n\t\r\n\t},\r\n```\r\n\r\nConfiguration\r\n------------\r\n\r\nRegister package service provider and facade in 'config/app.php'\r\n\r\n```php\r\n'providers' => [\r\n    ...\r\n    'GoogleMaps\\ServiceProvider\\GoogleMapsServiceProvider',\r\n]\r\n\r\n'aliases' => [\r\n    ...\r\n    'GoogleMaps' => 'GoogleMaps\\Facade\\GoogleMapsFacade',\r\n]\r\n```\r\n\r\n\r\nPublish configuration file using **`php artisan vendor:publish --tag=googlemaps --force`** or simply copy package configuration file and paste into **`config/googlemaps.php`**\r\n\r\nOpen configuration file **`config/googlemaps.php`** and add your service key\r\n```php\r\n    /*\r\n    |----------------------------------\r\n    | Service Keys\r\n    |------------------------------------\r\n    */\r\n    \r\n    'key'       => 'ADD YOUR SERVICE KEY HERE',\r\n```\r\n\r\nIf you like to use different keys for any of the services, you can overwrite master API Key by specifying it in the `service` array for selected web service. \r\n\r\n\r\nUsage\r\n------------\r\n\r\nHere is an example of making request to Geocoding API:\r\n```php\r\n$response = \\GoogleMaps::load('geocoding')\r\n\t\t->setParam (['address' =>'santa cruz'])\r\n \t\t->get();\r\n```\r\n\r\nBy default, where appropriate, `output` parameter set to `JSON`. Don't forget to decode JSON string into PHP variable. \r\nSee [Processing Response] (https://developers.google.com/maps/documentation/webservices/#Parsing) for more details on parsing returning output.\r\n\r\n\r\nRequired parameters can be specified as an array of `key:value` pairs:\r\n\r\n```php\r\n$response = \\GoogleMaps::load('geocoding')\r\n\t\t->setParam ([\r\n\t\t    'address'    =>'santa cruz',\r\n         \t    'components' => [\r\n                     \t'administrative_area'  => 'TX',\r\n                     \t'country'              => 'US',\r\n                      ]\r\n\r\n                ])\r\n                ->get();\r\n ```\r\n \r\nAlternatively parameters can be set using `setParamByKey()` method. For deeply nested array use \"dot\" notation as per example below.\r\n\r\n```php\r\n$endpoint = \\GoogleMaps::load('geocoding')\r\n   ->setParamByKey('address', 'santa cruz')\r\n   ->setParamByKey('components.administrative_area', 'TX') //return $this\r\n    ... \r\n\r\n```\r\n\r\nAnother example showing request to Places API Place Add service:\r\n\r\n```php\r\n$response = \\GoogleMaps::load('placeadd')\r\n                ->setParam([\r\n                   'location' => [\r\n                        'lat'  => -33.8669710,\r\n                        'lng'  => 151.1958750\r\n                      ],\r\n                   'accuracy'           => 0,\r\n                   \"name\"               =>  \"Google Shoes!\",\r\n                   \"address\"            => \"48 Pirrama Road, Pyrmont, NSW 2009, Australia\",\r\n                   \"types\"              => [\"shoe_store\"],\r\n                   \"website\"            => \"http://www.google.com.au/\",\r\n                   \"language\"           => \"en-AU\",\r\n                   \"phone_number\"       =>  \"(02) 9374 4000\"                       \r\n                          ])\r\n                  ->get();\t\r\n```\r\n\r\nAvailable methods\r\n------------\r\n\r\n* [`load( $serviceName )`](#load)\r\n* [`setEndpoint( $endpoint )`](#setEndpoint)\r\n* [`getEndpoint()`](#getEndpoint)\r\n* [`setParamByKey( $key, $value)`](#setParamByKey)\r\n* [`setParam( $parameters)`](#setParam)\r\n* [`get()`](#get)\r\n* [`get( $key )`](#get)\r\n* [`containsLocation( $lat, $lng )`](#containsLocation)\r\n* [`isLocationOnEdge( $lat, $lng, $tolrance)`](#isLocationOnEdge)\r\n\r\n---\r\n\r\n<a name=\"load\"></a>\r\n**`load( $serviceName )`** - load web service by name \r\n\r\nAccepts string as parameter, web service name as specified in configuration file.  \r\nReturns reference to it's self.\r\n\r\n```php\r\n\r\n\\GoogleMaps::load('geocoding') \r\n... \r\n\r\n```\r\n---\r\n\r\n<a name=\"setEndpoint\"></a>\r\n**`setEndpoint( $endpoint )`** - set request output\r\n\r\nAccepts string as parameter, `json` or `xml`, if omitted defaulted to `json`.  \r\nReturns reference to it's self.\r\n\r\n```php\r\n$response = \\GoogleMaps::load('geocoding')\r\n\t\t->setEndpoint('json')  // return $this\r\n\t\t...\r\n```\r\n\r\n---\r\n\r\n<a name=\"getEndpoint\"></a>\r\n**`getEndpoint()`** - get current request output\r\n\r\nReturns string.\r\n\r\n```php\r\n$endpoint = \\GoogleMaps::load('geocoding')\r\n\t\t->setEndpoint('json')\r\n\t\t->getEndpoint();\r\n\r\necho $endpoint; // output 'json'\r\n```\r\n\r\n---\r\n\r\n<a name=\"setParamByKey\"></a>\r\n**`setParamByKey( $key, $value )`** - set request parameter using key:value pair\r\n\r\nAccepts two parameters:\r\n* `key` - body parameter name\r\n* `value` - body parameter value \r\n\r\nDeeply nested array can use 'dot' notation to assign value.  \r\nReturns reference to it's self.\r\n\r\n```php\r\n$endpoint = \\GoogleMaps::load('geocoding')\r\n   ->setParamByKey('address', 'santa cruz')\r\n   ->setParamByKey('components.administrative_area', 'TX') //return $this\r\n    ...\r\n```\r\n\r\n---\r\n\r\n<a name=\"setParam\"></a>\r\n**`setParam( $parameters)`** - set all request parameters at once\r\n\r\nAccepts array of parameters  \r\nReturns reference to it's self.\r\n\r\n```php\r\n$response = \\GoogleMaps::load('geocoding')\r\n                ->setParam([\r\n                   'address'     => 'santa cruz',\r\n                   'components'  => [\r\n                        'administrative_area'   => 'TX',\r\n                        'country'               => 'US',\r\n                         ]\r\n                     ]) // return $this\r\n...\r\n```\r\n\r\n---\r\n\r\n<a name=\"get\"></a>\r\n* **`get()`** - perform web service request (irrespectively to request type POST or GET )\r\n* **`get( $key )`** - accepts string response body key, use 'dot' notation for deeply nested array\r\n\r\nReturns web service response in the format specified by **`setEndpoint()`** method, if omitted defaulted to `JSON`. \r\nUse `json_decode()` to convert JSON string into PHP variable. See [Processing Response] (https://developers.google.com/maps/documentation/webservices/#Parsing) for more details on parsing returning output.\r\n\r\n```php\r\n$response = \\GoogleMaps::load('geocoding')\r\n                ->setParamByKey('address', 'santa cruz')\r\n                ->setParamByKey('components.administrative_area', 'TX') \r\n                 ->get();\r\n\r\nvar_dump( json_decode( $response ) );  // output \r\n\r\n/*\r\n{\\n\r\n   \"results\" : [\\n\r\n      {\\n\r\n         \"address_components\" : [\\n\r\n            {\\n\r\n               \"long_name\" : \"277\",\\n\r\n               \"short_name\" : \"277\",\\n\r\n               \"types\" : [ \"street_number\" ]\\n\r\n            },\\n\r\n            ...\r\n*/\r\n\r\n\r\n```\r\n\r\nExample with `$key` parameter\r\n\r\n```php\r\n$response = \\GoogleMaps::load('geocoding')\r\n                ->setParamByKey('latlng', '40.714224,-73.961452') \r\n                 ->get('results.formatted_address');\r\n\r\nvar_dump( json_decode( $response ) );  // output \r\n\r\n/*\r\narray:1 [▼\r\n  \"results\" => array:9 [▼\r\n    0 => array:1 [▼\r\n      \"formatted_address\" => \"277 Bedford Ave, Brooklyn, NY 11211, USA\"\r\n    ]\r\n    1 => array:1 [▼\r\n      \"formatted_address\" => \"Grand St/Bedford Av, Brooklyn, NY 11211, USA\"\r\n    ]\r\n            ...\r\n*/\r\n\r\n\r\n```\r\n\r\n---\r\n\r\n<a name=\"isLocationOnEdge\"></a>\r\n**`isLocationOnEdge( $lat, $lng, $tolrance = 0.1 )`** - To determine whether a point falls on or near a polyline, or on or near the edge of a polygon, pass the point, the polyline/polygon, and optionally a tolerance value in degrees.\r\n\r\nThis method only available with Google Maps Directions API.\r\n\r\nAccepted parameter:\r\n* `$lat` - double latitude \r\n* `$lng` - double longitude \r\n* `$tolrance` - double\r\n\r\n```php\r\n$response = \\GoogleMaps::load('directions')\r\n            ->setParam([\r\n                'origin'          => 'place_id:ChIJ685WIFYViEgRHlHvBbiD5nE', \r\n                'destination'     => 'place_id:ChIJA01I-8YVhkgRGJb0fW4UX7Y', \r\n            ])\r\n           ->isLocationOnEdge(55.86483,-4.25161);\r\n\r\n    dd( $response  );  // true\r\n```\r\n\r\n---\r\n\r\n\r\n<a name=\"containsLocation\"></a>\r\n**`containsLocation( $lat, $lng )`** -To find whether a given point falls within a polygon.\r\n\r\nThis method only available with Google Maps Directions API.\r\n\r\nAccepted parameter:\r\n* `$lat` - double latitude \r\n* `$lng` - double longitude \r\n\r\n```php\r\n$response = \\GoogleMaps::load('directions')\r\n            ->setParam([\r\n                'origin'          => 'place_id:ChIJ685WIFYViEgRHlHvBbiD5nE', \r\n                'destination'     => 'place_id:ChIJA01I-8YVhkgRGJb0fW4UX7Y', \r\n            ])\r\n           ->containsLocation(55.86483,-4.25161);\r\n\r\n    dd( $response  );  // true\r\n```\r\n\r\nSupport\r\n-------\r\n\r\n[Please open an issue on GitHub](https://github.com/alexpechkarev/google-maps/issues)\r\n\r\n\r\nLicense\r\n-------\r\n\r\nCollection of Google Maps API Web Services for Laravel 5 is released under the MIT License. See the bundled\r\n[LICENSE](https://github.com/alexpechkarev/google-maps/blob/master/LICENSE)\r\nfile for details.\r\n",
  "google": "UA-67253134-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}
